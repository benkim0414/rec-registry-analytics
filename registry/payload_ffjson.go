// Code generated by ffjson <https://github.com/pquerna/ffjson>. DO NOT EDIT.
// source: payload.go

package registry

import (
	"bytes"
	"fmt"
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

// MarshalJSON marshal bytes to json - template
func (j *CertificateAction) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *CertificateAction) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"ActionType":`)
	fflib.WriteJsonString(buf, string(j.ActionType))
	buf.WriteString(`,"CompletedTime":`)
	fflib.WriteJsonString(buf, string(j.CompletedTime))
	buf.WriteString(`,"CertificateRanges":`)
	if j.CertificateRanges != nil {
		buf.WriteString(`[`)
		for i, v := range j.CertificateRanges {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtCertificateActionbase = iota
	ffjtCertificateActionnosuchkey

	ffjtCertificateActionActionType

	ffjtCertificateActionCompletedTime

	ffjtCertificateActionCertificateRanges
)

var ffjKeyCertificateActionActionType = []byte("ActionType")

var ffjKeyCertificateActionCompletedTime = []byte("CompletedTime")

var ffjKeyCertificateActionCertificateRanges = []byte("CertificateRanges")

// UnmarshalJSON umarshall json - template of ffjson
func (j *CertificateAction) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *CertificateAction) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtCertificateActionbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtCertificateActionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'A':

					if bytes.Equal(ffjKeyCertificateActionActionType, kn) {
						currentKey = ffjtCertificateActionActionType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'C':

					if bytes.Equal(ffjKeyCertificateActionCompletedTime, kn) {
						currentKey = ffjtCertificateActionCompletedTime
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyCertificateActionCertificateRanges, kn) {
						currentKey = ffjtCertificateActionCertificateRanges
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyCertificateActionCertificateRanges, kn) {
					currentKey = ffjtCertificateActionCertificateRanges
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyCertificateActionCompletedTime, kn) {
					currentKey = ffjtCertificateActionCompletedTime
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyCertificateActionActionType, kn) {
					currentKey = ffjtCertificateActionActionType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtCertificateActionnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtCertificateActionActionType:
					goto handle_ActionType

				case ffjtCertificateActionCompletedTime:
					goto handle_CompletedTime

				case ffjtCertificateActionCertificateRanges:
					goto handle_CertificateRanges

				case ffjtCertificateActionnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_ActionType:

	/* handler: j.ActionType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.ActionType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CompletedTime:

	/* handler: j.CompletedTime type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CompletedTime = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_CertificateRanges:

	/* handler: j.CertificateRanges type=[]registry.CertificateRange kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.CertificateRanges = nil
		} else {

			j.CertificateRanges = []CertificateRange{}

			wantVal := true

			for {

				var tmpJCertificateRanges CertificateRange

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJCertificateRanges type=registry.CertificateRange kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

					} else {

						err = tmpJCertificateRanges.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
						if err != nil {
							return err
						}
					}
					state = fflib.FFParse_after_value
				}

				j.CertificateRanges = append(j.CertificateRanges, tmpJCertificateRanges)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *CertificateRange) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *CertificateRange) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"CertificateType":`)
	fflib.WriteJsonString(buf, string(j.CertificateType))
	buf.WriteString(`,"RegisteredPersonNumber":`)
	fflib.FormatBits2(buf, uint64(j.RegisteredPersonNumber), 10, j.RegisteredPersonNumber < 0)
	buf.WriteString(`,"AccreditationCode":`)
	fflib.WriteJsonString(buf, string(j.AccreditationCode))
	buf.WriteString(`,"GenerationYear":`)
	fflib.FormatBits2(buf, uint64(j.GenerationYear), 10, j.GenerationYear < 0)
	buf.WriteString(`,"GenerationState":`)
	fflib.WriteJsonString(buf, string(j.GenerationState))
	buf.WriteString(`,"StartSerialNumber":`)
	fflib.FormatBits2(buf, uint64(j.StartSerialNumber), 10, j.StartSerialNumber < 0)
	buf.WriteString(`,"EndSerialNumber":`)
	fflib.FormatBits2(buf, uint64(j.EndSerialNumber), 10, j.EndSerialNumber < 0)
	buf.WriteString(`,"FuelSource":`)
	fflib.WriteJsonString(buf, string(j.FuelSource))
	buf.WriteString(`,"OwnerAccount":`)
	fflib.WriteJsonString(buf, string(j.OwnerAccount))
	buf.WriteString(`,"OwnerAccountID":`)
	fflib.FormatBits2(buf, uint64(j.OwnerAccountID), 10, j.OwnerAccountID < 0)
	buf.WriteString(`,"Status":`)
	fflib.WriteJsonString(buf, string(j.Status))
	buf.WriteByte('}')
	return nil
}

const (
	ffjtCertificateRangebase = iota
	ffjtCertificateRangenosuchkey

	ffjtCertificateRangeCertificateType

	ffjtCertificateRangeRegisteredPersonNumber

	ffjtCertificateRangeAccreditationCode

	ffjtCertificateRangeGenerationYear

	ffjtCertificateRangeGenerationState

	ffjtCertificateRangeStartSerialNumber

	ffjtCertificateRangeEndSerialNumber

	ffjtCertificateRangeFuelSource

	ffjtCertificateRangeOwnerAccount

	ffjtCertificateRangeOwnerAccountID

	ffjtCertificateRangeStatus
)

var ffjKeyCertificateRangeCertificateType = []byte("CertificateType")

var ffjKeyCertificateRangeRegisteredPersonNumber = []byte("RegisteredPersonNumber")

var ffjKeyCertificateRangeAccreditationCode = []byte("AccreditationCode")

var ffjKeyCertificateRangeGenerationYear = []byte("GenerationYear")

var ffjKeyCertificateRangeGenerationState = []byte("GenerationState")

var ffjKeyCertificateRangeStartSerialNumber = []byte("StartSerialNumber")

var ffjKeyCertificateRangeEndSerialNumber = []byte("EndSerialNumber")

var ffjKeyCertificateRangeFuelSource = []byte("FuelSource")

var ffjKeyCertificateRangeOwnerAccount = []byte("OwnerAccount")

var ffjKeyCertificateRangeOwnerAccountID = []byte("OwnerAccountID")

var ffjKeyCertificateRangeStatus = []byte("Status")

// UnmarshalJSON umarshall json - template of ffjson
func (j *CertificateRange) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *CertificateRange) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtCertificateRangebase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtCertificateRangenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'A':

					if bytes.Equal(ffjKeyCertificateRangeAccreditationCode, kn) {
						currentKey = ffjtCertificateRangeAccreditationCode
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'C':

					if bytes.Equal(ffjKeyCertificateRangeCertificateType, kn) {
						currentKey = ffjtCertificateRangeCertificateType
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'E':

					if bytes.Equal(ffjKeyCertificateRangeEndSerialNumber, kn) {
						currentKey = ffjtCertificateRangeEndSerialNumber
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'F':

					if bytes.Equal(ffjKeyCertificateRangeFuelSource, kn) {
						currentKey = ffjtCertificateRangeFuelSource
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'G':

					if bytes.Equal(ffjKeyCertificateRangeGenerationYear, kn) {
						currentKey = ffjtCertificateRangeGenerationYear
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyCertificateRangeGenerationState, kn) {
						currentKey = ffjtCertificateRangeGenerationState
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'O':

					if bytes.Equal(ffjKeyCertificateRangeOwnerAccount, kn) {
						currentKey = ffjtCertificateRangeOwnerAccount
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyCertificateRangeOwnerAccountID, kn) {
						currentKey = ffjtCertificateRangeOwnerAccountID
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'R':

					if bytes.Equal(ffjKeyCertificateRangeRegisteredPersonNumber, kn) {
						currentKey = ffjtCertificateRangeRegisteredPersonNumber
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffjKeyCertificateRangeStartSerialNumber, kn) {
						currentKey = ffjtCertificateRangeStartSerialNumber
						state = fflib.FFParse_want_colon
						goto mainparse

					} else if bytes.Equal(ffjKeyCertificateRangeStatus, kn) {
						currentKey = ffjtCertificateRangeStatus
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyCertificateRangeStatus, kn) {
					currentKey = ffjtCertificateRangeStatus
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyCertificateRangeOwnerAccountID, kn) {
					currentKey = ffjtCertificateRangeOwnerAccountID
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyCertificateRangeOwnerAccount, kn) {
					currentKey = ffjtCertificateRangeOwnerAccount
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCertificateRangeFuelSource, kn) {
					currentKey = ffjtCertificateRangeFuelSource
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCertificateRangeEndSerialNumber, kn) {
					currentKey = ffjtCertificateRangeEndSerialNumber
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCertificateRangeStartSerialNumber, kn) {
					currentKey = ffjtCertificateRangeStartSerialNumber
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCertificateRangeGenerationState, kn) {
					currentKey = ffjtCertificateRangeGenerationState
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyCertificateRangeGenerationYear, kn) {
					currentKey = ffjtCertificateRangeGenerationYear
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyCertificateRangeAccreditationCode, kn) {
					currentKey = ffjtCertificateRangeAccreditationCode
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyCertificateRangeRegisteredPersonNumber, kn) {
					currentKey = ffjtCertificateRangeRegisteredPersonNumber
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.SimpleLetterEqualFold(ffjKeyCertificateRangeCertificateType, kn) {
					currentKey = ffjtCertificateRangeCertificateType
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtCertificateRangenosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtCertificateRangeCertificateType:
					goto handle_CertificateType

				case ffjtCertificateRangeRegisteredPersonNumber:
					goto handle_RegisteredPersonNumber

				case ffjtCertificateRangeAccreditationCode:
					goto handle_AccreditationCode

				case ffjtCertificateRangeGenerationYear:
					goto handle_GenerationYear

				case ffjtCertificateRangeGenerationState:
					goto handle_GenerationState

				case ffjtCertificateRangeStartSerialNumber:
					goto handle_StartSerialNumber

				case ffjtCertificateRangeEndSerialNumber:
					goto handle_EndSerialNumber

				case ffjtCertificateRangeFuelSource:
					goto handle_FuelSource

				case ffjtCertificateRangeOwnerAccount:
					goto handle_OwnerAccount

				case ffjtCertificateRangeOwnerAccountID:
					goto handle_OwnerAccountID

				case ffjtCertificateRangeStatus:
					goto handle_Status

				case ffjtCertificateRangenosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_CertificateType:

	/* handler: j.CertificateType type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.CertificateType = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_RegisteredPersonNumber:

	/* handler: j.RegisteredPersonNumber type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.RegisteredPersonNumber = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_AccreditationCode:

	/* handler: j.AccreditationCode type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.AccreditationCode = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_GenerationYear:

	/* handler: j.GenerationYear type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.GenerationYear = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_GenerationState:

	/* handler: j.GenerationState type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.GenerationState = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_StartSerialNumber:

	/* handler: j.StartSerialNumber type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.StartSerialNumber = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_EndSerialNumber:

	/* handler: j.EndSerialNumber type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.EndSerialNumber = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_FuelSource:

	/* handler: j.FuelSource type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.FuelSource = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OwnerAccount:

	/* handler: j.OwnerAccount type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.OwnerAccount = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_OwnerAccountID:

	/* handler: j.OwnerAccountID type=int kind=int quoted=false*/

	{
		if tok != fflib.FFTok_integer && tok != fflib.FFTok_null {
			return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for int", tok))
		}
	}

	{

		if tok == fflib.FFTok_null {

		} else {

			tval, err := fflib.ParseInt(fs.Output.Bytes(), 10, 64)

			if err != nil {
				return fs.WrapErr(err)
			}

			j.OwnerAccountID = int(tval)

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Status:

	/* handler: j.Status type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Status = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}

// MarshalJSON marshal bytes to json - template
func (j *Payload) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if j == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := j.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

// MarshalJSONBuf marshal buff to json - template
func (j *Payload) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if j == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{"Status":`)
	fflib.WriteJsonString(buf, string(j.Status))
	buf.WriteString(`,"Result":`)
	if j.Result != nil {
		buf.WriteString(`[`)
		for i, v := range j.Result {
			if i != 0 {
				buf.WriteString(`,`)
			}

			{

				err = v.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
		}
		buf.WriteString(`]`)
	} else {
		buf.WriteString(`null`)
	}
	buf.WriteByte('}')
	return nil
}

const (
	ffjtPayloadbase = iota
	ffjtPayloadnosuchkey

	ffjtPayloadStatus

	ffjtPayloadResult
)

var ffjKeyPayloadStatus = []byte("Status")

var ffjKeyPayloadResult = []byte("Result")

// UnmarshalJSON umarshall json - template of ffjson
func (j *Payload) UnmarshalJSON(input []byte) error {
	fs := fflib.NewFFLexer(input)
	return j.UnmarshalJSONFFLexer(fs, fflib.FFParse_map_start)
}

// UnmarshalJSONFFLexer fast json unmarshall - template ffjson
func (j *Payload) UnmarshalJSONFFLexer(fs *fflib.FFLexer, state fflib.FFParseState) error {
	var err error
	currentKey := ffjtPayloadbase
	_ = currentKey
	tok := fflib.FFTok_init
	wantedTok := fflib.FFTok_init

mainparse:
	for {
		tok = fs.Scan()
		//	println(fmt.Sprintf("debug: tok: %v  state: %v", tok, state))
		if tok == fflib.FFTok_error {
			goto tokerror
		}

		switch state {

		case fflib.FFParse_map_start:
			if tok != fflib.FFTok_left_bracket {
				wantedTok = fflib.FFTok_left_bracket
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_key
			continue

		case fflib.FFParse_after_value:
			if tok == fflib.FFTok_comma {
				state = fflib.FFParse_want_key
			} else if tok == fflib.FFTok_right_bracket {
				goto done
			} else {
				wantedTok = fflib.FFTok_comma
				goto wrongtokenerror
			}

		case fflib.FFParse_want_key:
			// json {} ended. goto exit. woo.
			if tok == fflib.FFTok_right_bracket {
				goto done
			}
			if tok != fflib.FFTok_string {
				wantedTok = fflib.FFTok_string
				goto wrongtokenerror
			}

			kn := fs.Output.Bytes()
			if len(kn) <= 0 {
				// "" case. hrm.
				currentKey = ffjtPayloadnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			} else {
				switch kn[0] {

				case 'R':

					if bytes.Equal(ffjKeyPayloadResult, kn) {
						currentKey = ffjtPayloadResult
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				case 'S':

					if bytes.Equal(ffjKeyPayloadStatus, kn) {
						currentKey = ffjtPayloadStatus
						state = fflib.FFParse_want_colon
						goto mainparse
					}

				}

				if fflib.EqualFoldRight(ffjKeyPayloadResult, kn) {
					currentKey = ffjtPayloadResult
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				if fflib.EqualFoldRight(ffjKeyPayloadStatus, kn) {
					currentKey = ffjtPayloadStatus
					state = fflib.FFParse_want_colon
					goto mainparse
				}

				currentKey = ffjtPayloadnosuchkey
				state = fflib.FFParse_want_colon
				goto mainparse
			}

		case fflib.FFParse_want_colon:
			if tok != fflib.FFTok_colon {
				wantedTok = fflib.FFTok_colon
				goto wrongtokenerror
			}
			state = fflib.FFParse_want_value
			continue
		case fflib.FFParse_want_value:

			if tok == fflib.FFTok_left_brace || tok == fflib.FFTok_left_bracket || tok == fflib.FFTok_integer || tok == fflib.FFTok_double || tok == fflib.FFTok_string || tok == fflib.FFTok_bool || tok == fflib.FFTok_null {
				switch currentKey {

				case ffjtPayloadStatus:
					goto handle_Status

				case ffjtPayloadResult:
					goto handle_Result

				case ffjtPayloadnosuchkey:
					err = fs.SkipField(tok)
					if err != nil {
						return fs.WrapErr(err)
					}
					state = fflib.FFParse_after_value
					goto mainparse
				}
			} else {
				goto wantedvalue
			}
		}
	}

handle_Status:

	/* handler: j.Status type=string kind=string quoted=false*/

	{

		{
			if tok != fflib.FFTok_string && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for string", tok))
			}
		}

		if tok == fflib.FFTok_null {

		} else {

			outBuf := fs.Output.Bytes()

			j.Status = string(string(outBuf))

		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

handle_Result:

	/* handler: j.Result type=[]registry.CertificateAction kind=slice quoted=false*/

	{

		{
			if tok != fflib.FFTok_left_brace && tok != fflib.FFTok_null {
				return fs.WrapErr(fmt.Errorf("cannot unmarshal %s into Go value for ", tok))
			}
		}

		if tok == fflib.FFTok_null {
			j.Result = nil
		} else {

			j.Result = []CertificateAction{}

			wantVal := true

			for {

				var tmpJResult CertificateAction

				tok = fs.Scan()
				if tok == fflib.FFTok_error {
					goto tokerror
				}
				if tok == fflib.FFTok_right_brace {
					break
				}

				if tok == fflib.FFTok_comma {
					if wantVal == true {
						// TODO(pquerna): this isn't an ideal error message, this handles
						// things like [,,,] as an array value.
						return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
					}
					continue
				} else {
					wantVal = true
				}

				/* handler: tmpJResult type=registry.CertificateAction kind=struct quoted=false*/

				{
					if tok == fflib.FFTok_null {

					} else {

						err = tmpJResult.UnmarshalJSONFFLexer(fs, fflib.FFParse_want_key)
						if err != nil {
							return err
						}
					}
					state = fflib.FFParse_after_value
				}

				j.Result = append(j.Result, tmpJResult)

				wantVal = false
			}
		}
	}

	state = fflib.FFParse_after_value
	goto mainparse

wantedvalue:
	return fs.WrapErr(fmt.Errorf("wanted value token, but got token: %v", tok))
wrongtokenerror:
	return fs.WrapErr(fmt.Errorf("ffjson: wanted token: %v, but got token: %v output=%s", wantedTok, tok, fs.Output.String()))
tokerror:
	if fs.BigError != nil {
		return fs.WrapErr(fs.BigError)
	}
	err = fs.Error.ToError()
	if err != nil {
		return fs.WrapErr(err)
	}
	panic("ffjson-generated: unreachable, please report bug.")
done:

	return nil
}
